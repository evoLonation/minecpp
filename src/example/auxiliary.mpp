export module example.auxiliary;
import <stl>;
import <fmt>;
import <glm>;
import resource;
import context;
import vertex;
import gui;
import input;
import transformation;
import tool;
import <gl>;

using namespace minecpp;
export namespace auxiliary {

inline int run(){
    try{
        Context ctx {1920, 1080};
        InputProcessor ip;
        Drawer drawer;
        // LightContext lightCtx;
        Camera camera {newViewModel(glm::vec3(3.0f, 0.0f, 3.0f)), {}};
        CameraControlSetter setter {camera};
        // LightScene scene {basicData};
        glm::vec3 xColor = glm::vec3{1.0f, 0.0f, 0.0f};
        glm::vec3 yColor = glm::vec3{0.0f, 1.0f, 0.0f};
        glm::vec3 zColor = glm::vec3{0.0f, 0.0f, 1.0f};
        VertexMeta<true, glm::vec3, glm::vec3> vertexMeta {
            .vertexes {
                {glm::vec3{0.0f}, xColor},
                {glm::vec3{1.0f, 0.0f, 0.0f}, xColor},
                {glm::vec3{0.0f}, yColor},
                {glm::vec3{0.0f, 1.0f, 0.0f}, yColor},
                {glm::vec3{0.0f}, zColor},
                {glm::vec3{0.0f, 0.0f, 1.0f}, zColor},
            },
            .indices {
                0, 1, 2, 3, 4, 5,
            }
        };
        VertexData<true> vertexData {createVertexData(vertexMeta)};

        ModelTrans modelTrans {glm::vec3{0.0f}};
        Program program{
            VertexShader::fromFile("../shader/auxiliary/vertex.glsl"),
            FragmentShader::fromFile("../shader/auxiliary/fragment.glsl"),
        };
        DrawUnit coord {
            vertexData.vao, 
            program,
            {
                {"model", modelTrans.get()},
                {"view", camera.viewTrans.get()},
                {"projection", camera.projectionTrans.get()},
            },
            {},
            GL_LINES
        };
        KeyDownHandler visibleHandler {GLFW_KEY_ESCAPE, []{
            InputProcessor::getInstance().setCursorVisible(!InputProcessor::getInstance().isCursorVisible());
        }}; 
        

        

        ctx.startLoop([&]{
            // GuiFrame frame;
            // if(ImGui::Begin("controller")){
            //     modelTrans.showControllerPanel();
            // }
            // ImGui::End();
            drawer.draw();
            ip.processInput();
        });

    }catch(std::string a){
        fmt::println("{}", a);
    }

    return 0;
}

};
